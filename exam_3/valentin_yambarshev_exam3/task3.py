# Есть Помидор со следующими характеристиками:
# Индекс
# Стадия зрелости(стадии: Отсутствует, Цветение, Зеленый, Красный)
# Помидор может:
# Расти (переходить на следующую стадию созревания)
# Предоставлять информацию о своей зрелости
# Есть Куст с помидорами, который:
# Содержит список томатов, которые на ней растут
# И может:
# Расти вместе с томатами
# Предоставлять информацию о зрелости всех томатов
# Предоставлять урожай
# И также есть Садовник, который имеет:
# Имя
# Растение, за которым он ухаживает
# И может:
# Ухаживать за растением
# Собирать с него урожай
# Задание:
# Класс Tomato
# Создайте класс Tomato
# Создайте статический атрибут states, который будет содержать все стадии созревания помидора
# Создайте метод __init__(), внутри которого будут определены два приватных атрибута:
# 1) _index - передается параметром и 2) _state - принимает первое значение из словаря states
# Создайте метод grow(), который будет переводить томат на следующую стадию созревания
# Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг последней стадии созревания)
# Класс TomatoBush
# Создайте класс TomatoBush
# Определите метод __init__(), который будет принимать в качестве параметра количество томатов
# и на его основе будет создавать список объектов класса Tomato. Данный список будет храниться внутри атрибута tomatoes.
# Создайте метод grow_all(), который будет переводить все объекты из списка томатов на следующий этап созревания
# Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из списка стали спелыми
# Создайте метод give_away_all(), который будет чистить список томатов после сбора урожая
# Класс Gardener
# Создайте класс Gardener
# Создайте метод __init__(), внутри которого будут определены два атрибута:
# 1) name - передается параметром, является публичным и 2) _plant - принимает объект класса Tomato, является приватным
# Создайте метод work(), который заставляет садовника работать, что позволяет растению становиться более зрелым
# Создайте метод harvest(), который проверяет, все ли плоды созрели.
# Если все - садовник собирает урожай. Если нет - метод печатает предупреждение.
# Создайте статический метод knowledge_base(), который выведет в консоль справку по садоводству.
# Тесты (main)
# Вызовите справку по садоводству
# Создайте объекты классов TomatoBush и Gardener
# Используя объект класса Gardener, поухаживайте за кустом с помидорами
# Попробуйте собрать урожай
# Если томаты еще не дозрели, продолжайте ухаживать за ними
# Соберите урожай

import time


class Tomato:
    states = {'Отсутствует': 0, 'Цветение': 1, 'Зеленый': 2, 'Красный': 3}

    def __init__(self, index):
        self._index = index
        self._state = self.states['Отсутствует']

    def grow(self):
        if self._state < 3:
            self._state += 1

    def is_ripe(self):
        if self._state == 3:
            return True
        else:
            return False


class TomatoBush:

    def __init__(self, num):
        self.tomatoes = [Tomato(index) for index in range(num)]

    def grow_all(self):
        for tomato in self.tomatoes:
            tomato.grow()

 # all() - она возвращает TRue если все элементы в иттерируемом объекте истины
    def all_are_ripe(self):
        return all(tomato.is_ripe() for tomato in self.tomatoes)
        # for tomato in self.tomatoes:
        #     if tomato.is_ripe():
        #         return True

    def give_away_all(self):
        self.tomatoes = []


class Gardener:

    def __init__(self, name, plant):
        self.name = name
        self._plant = plant

    def work(self):
        print('Садовник начал работу...')
        time.sleep(3)
        self._plant.grow_all()
        print('Садовник закончил работу')

    def harvest(self):
        if self._plant.all_are_ripe():
            print('Урожай созрел, пора собирать')
            self._plant.give_away_all()
        else:
            print('Томаты еще не созрели')

    @staticmethod
    def knowledge_base():
        print('Справка по садоводчеству')


# Вызовите справку по садоводству
Gardener.knowledge_base()
# Создайте объекты классов TomatoBush и Gardener
tomatoBush = TomatoBush(5)
gardener = Gardener('Petr', tomatoBush)
# Используя объект класса Gardener, поухаживайте за кустом с помидорами
gardener.work()
gardener.work()
# Попробуйте собрать урожай
gardener.harvest()
# Если томаты еще не дозрели, продолжайте ухаживать за ними
gardener.work()
gardener.harvest()
# Соберите урожай




