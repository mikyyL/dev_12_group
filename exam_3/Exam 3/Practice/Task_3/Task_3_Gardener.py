from Task_3_Tomato import Tomato
from Task_3_TomatoBush import TomatoBush

print('Класс Tomato'
      'Создайте класс Tomato'
      'Создайте статический атрибут states, который будет содержать все стадии созревания помидора'
      'Создайте метод __init__(), внутри которого будут определены два приватных атрибута: 1) _index - '
      'передается параметром и 2) _state - принимает первое значение из словаря states'
      'Создайте метод grow(), который будет переводить томат на следующую стадию созревания'
      'Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг последней стадии созревания)'
      'Класс TomatoBush'
      'Создайте класс TomatoBush'
      'Определите метод __init__(), который будет принимать в качестве параметра количество томатов и на его основе '
      'будет создавать список объектов класса Tomato. Данный список будет храниться внутри атрибута tomatoes.'
      'Создайте метод grow_all(), который будет переводить все объекты из списка томатов на следующий этап созревания'
      'Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из списка стали спелыми'
      'Создайте метод give_away_all(), который будет чистить список томатов после сбора урожая'
      'Класс Gardener'
      'Создайте класс Gardener'
      'Создайте метод __init__(), внутри которого будут определены два атрибута: 1) name - передается параметром, '
      'является публичным и 2) _plant - принимает объект класса Tomato, является приватным'
      'Создайте метод work(), который заставляет садовника работать, что позволяет растению становиться более зрелым'
      'Создайте метод harvest(), который проверяет, все ли плоды созрели. Если все - садовник собирает урожай. '
      'Если нет - метод печатает предупреждение.'
      'Создайте статический метод knowledge_base(), который выведет в консоль справку по садоводству.'
      'Тесты (main)'
      'Вызовите справку по садоводству'
      'Создайте объекты классов TomatoBush и Gardener'
      'Используя объект класса Gardener, поухаживайте за кустом с помидорами'
      'Попробуйте собрать урожай'
      'Если томаты еще не дозрели, продолжайте ухаживать за ними'
      'Соберите урожай')


class Gardener(Tomato):

    def __init__(self, name, __plant):
        super().__init__(index=0, state='Отсутствует')
        self.name = name
        self.__plant = __plant

    def work(self):
        self.__plant.grow_all()

    def harvest(self):
        if self.__plant.all_are_ripe():
            self.__plant.give_away_all()
            print('Урожай собран.')
        else:
            print('Плоды ещё не созрели.')

    @staticmethod
    def knowledge_base():
        print('Культура выращивания: помидор\n'
              'Садовод - человек, занимающийся разведением сада, специалист по садоводству')


def main():
    Gardener.knowledge_base()

    t_bush = TomatoBush(3)
    farmer = Gardener('John', t_bush)

    farmer.work()

    farmer.harvest()

    farmer.work()
    farmer.harvest()
    farmer.work()
    farmer.work()
    farmer.harvest()


if __name__ == '__main__':
    main()
